---
import '../styles/global.css';
// Layout.astro: site metadata for SEO and sidebar post navigation
import { getCollection } from 'astro:content';
const { site, url } = Astro;
const { noSidebar = false } = Astro.props as { noSidebar?: boolean };
const canonicalUrl = new URL(url.pathname, site).toString();
const siteTitle = 'Subaru Running Blog';
const siteDescription = 'Training logs, race reports, and running notes by Subaru.';

// Fetch published posts for sidebar and calendar
const posts = await getCollection('blog', ({ data }) => data.status === 'publish');
posts.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

// Limit sidebar to latest N posts (performance)
const SIDEBAR_LIMIT = 100;
const sidebarPosts = posts.slice(0, SIDEBAR_LIMIT);

// Derive unique categories for sidebar filter
const categories = Array.from(new Set(posts.map((p) => p.data.category))).sort();
categories.unshift('All');

// Prepare calendar data: date -> compact { s: first slug, c: count } mapping
const postsByDate = posts.reduce((acc, p) => {
  const key = p.slug.slice(0, 10); // YYYY-MM-DD from filename
  if (!acc[key]) acc[key] = { s: p.slug, c: 1 };
  else acc[key].c += 1;
  return acc;
}, {} as Record<string, { s: string; c: number }>);
// Encode data safely for embedding in inline script
const calendarDataURI = encodeURIComponent(JSON.stringify(postsByDate));

// Years available for selection
const years = Array.from(new Set(posts.map((p) => p.data.date.getFullYear()))).sort((a, b) => a - b);
const now = new Date();
const currentYear = now.getFullYear();
const currentMonth = now.getMonth();

// Determine initial calendar view: prefer selected post's month, else latest post, else current
let initialYear = currentYear;
let initialMonth = currentMonth; // 0-11

const latestSlugDate = posts[0]?.slug.slice(0, 10);
if (latestSlugDate) {
  const [ly, lm] = latestSlugDate.split('-');
  initialYear = parseInt(ly, 10);
  initialMonth = parseInt(lm, 10) - 1;
}

const pathMatch = url.pathname.match(/^\/(\d{4})-(\d{2})-/);
if (pathMatch) {
  initialYear = parseInt(pathMatch[1], 10);
  initialMonth = parseInt(pathMatch[2], 10) - 1;
}

// Server-render initial month grid for better UX (no-JS fallback)
function buildInitialMonth(year: number, month: number) {
  const first = new Date(year, month, 1);
  const startDay = first.getDay();
  const daysInMonth = new Date(year, month + 1, 0).getDate();
  const rows: { day: number; slug?: string; count?: number }[][] = [];
  let day = 1;
  for (let r = 0; r < 6; r++) {
    const row: { day: number; slug?: string; count?: number }[] = [];
    for (let c = 0; c < 7; c++) {
      if (r === 0 && c < startDay) {
        row.push({ day: 0 });
      } else if (day > daysInMonth) {
        row.push({ day: 0 });
      } else {
        const key = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
        const entry = postsByDate[key];
        if (entry) {
          row.push({ day, slug: entry.s, count: entry.c });
        } else {
          row.push({ day });
        }
        day++;
      }
    }
    rows.push(row);
  }
  return rows;
}
const initialMonthRows = buildInitialMonth(initialYear, initialMonth);
---
<!doctype html>
<html lang="en" class="scroll-smooth">
	<head>
		<meta charset="UTF-8" />
			<meta name="viewport" content="width=device-width, initial-scale=1" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{siteTitle}</title>
		<link rel="canonical" href={canonicalUrl} />
		<meta property="og:url" content={canonicalUrl} />
    <meta name="description" content={siteDescription} />
    <meta property="og:title" content={siteTitle} />
    <meta property="og:site_name" content={siteTitle} />
    <meta property="og:type" content="website" />
    <meta property="og:description" content={siteDescription} />
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content={siteTitle} />
    <meta name="twitter:description" content={siteDescription} />
    { !noSidebar && (
      <script
        is:inline
        id="calendar-data"
        set:html={`window.__CAL_MAP=${JSON.stringify(postsByDate).replace(/</g, '\\u003c')}`}
      ></script>
    )}
	</head>
	<body class="min-h-screen bg-gradient-to-b from-white to-gray-50 dark:from-gray-950 dark:to-gray-900">
		<header class="bg-white/90 dark:bg-gray-950/80 backdrop-blur border-b border-gray-200 dark:border-gray-800 sticky top-0 z-30">
			<div class="container-page flex items-center justify-between py-4">
				<a href="/" class="flex items-center gap-3 no-underline">
					<img src="/logo-mark.svg" alt="" aria-hidden="true" class="h-9 w-9 rounded-lg" width="36" height="36" />
					<span class="text-lg md:text-xl font-bold">Subaru Running Blog</span>
				</a>
				<div class="flex items-center gap-3">
					<a href="/pdf-compress/" class="text-sm rounded-md px-3 py-1.5 ring-1 ring-inset ring-gray-300 dark:ring-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800">PDF Compressor</a>
					<button id="themeToggle" class="text-sm rounded-md px-3 py-1.5 ring-1 ring-inset ring-gray-300 dark:ring-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800">Toggle theme</button>
				</div>
			</div>
		</header>
		{ noSidebar ? (
			<div class="container-page py-8">
				<main class="min-w-0">
					<slot />
				</main>
			</div>
		) : (
			<div class="container-page grid grid-cols-1 lg:grid-cols-[20rem_1fr] gap-8 py-8">
			<!-- Calendar first on mobile, left column on desktop -->
			<div class="order-1 lg:order-1 lg:sticky lg:top-20 self-start">
					<div class="card px-4 py-4">
						<h2 class="text-lg font-semibold mb-2">Calendar</h2>
						<div class="flex gap-2 mb-3">
							<label for="calendarYear" class="sr-only">Year</label>
							<select id="calendarYear" class="border rounded px-2 py-1 flex-1 bg-white dark:bg-gray-900">
								{years.map((y) => (
									<option value={y} selected={y === initialYear}>{y}</option>
								))}
							</select>
							<label for="calendarMonth" class="sr-only">Month</label>
							<select id="calendarMonth" class="border rounded px-2 py-1 flex-1 bg-white dark:bg-gray-900">
								{[...Array(12)].map((_, i) => (
									<option value={i} selected={i === initialMonth}>{new Date(2000, i, 1).toLocaleString('en-US', { month: 'short' })}</option>
								))}
							</select>
						</div>
						<table class="w-full text-sm text-center select-none">
							<thead>
								<tr class="text-gray-500 dark:text-gray-400">
									{['Su','Mo','Tu','We','Th','Fr','Sa'].map((d) => (<th class="py-1 font-medium">{d}</th>))}
								</tr>
							</thead>
							<tbody id="calendarBody">
								{initialMonthRows.map((week) => (
									<tr>
										{week.map((cell) => (
											<td class="py-1">
												{cell.day === 0 ? (
													<span class="inline-block w-8 h-8"></span>
												) : cell.slug ? (
													<a href={`/${cell.slug}/`} class="inline-block w-8 h-8 leading-8 rounded hover:bg-blue-50 text-blue-600 underline">
														{cell.day}
														{cell.count && cell.count > 1 ? (
															<span class="ml-1 text-[10px] text-gray-600">{cell.count}</span>
														) : null}
													</a>
												) : (
													<span class="inline-block w-8 h-8 leading-8 rounded text-gray-700">{cell.day}</span>
												)}
											</td>
										))}
									</tr>
								))}
							</tbody>
						</table>
						<p class="mt-2 text-xs text-gray-500 dark:text-gray-400">Dates with posts are clickable.</p>
					</div>
			</div>
	   <script>
  // Simple theme toggle with localStorage
  (function initTheme() {
    try {
      const root = document.documentElement;
      const stored = localStorage.getItem('theme');
      if (stored === 'dark' || (!stored && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
        root.classList.add('dark');
      }
      document.addEventListener('click', (e) => {
        const t = e.target;
        if (t && t.id === 'themeToggle') {
          root.classList.toggle('dark');
          localStorage.setItem('theme', root.classList.contains('dark') ? 'dark' : 'light');
        }
      });
    } catch (_) {}
  })();

  (function initSidebar() {
    const init = () => {
      // Calendar setup: prefer JSON embedded at build time
          let POSTS_BY_DATE = (window as any).__CAL_MAP || {};
          if (!Object.keys(POSTS_BY_DATE).length) {
            const dataEl = document.getElementById('calendar-data');
            try {
              if (dataEl && dataEl.textContent) {
                POSTS_BY_DATE = JSON.parse(dataEl.textContent);
              }
            } catch (_) {}
          }

      // Fallback: scrape sidebar only if no JSON present
          if (!Object.keys(POSTS_BY_DATE).length) {
        document.querySelectorAll('#blog-nav a[href^="/"]').forEach((a) => {
          const href = a.getAttribute('href') || '';
          const m = href.match(/^\/(\d{4}-\d{2}-\d{2})(?:-|\/)/);
          if (m) {
            const key = m[1];
            const slug = href.replace(/^\/+|\/+$/g, '');
            if (POSTS_BY_DATE[key]) {
              POSTS_BY_DATE[key].c = (POSTS_BY_DATE[key].c || 0) + 1;
            } else {
              POSTS_BY_DATE[key] = { s: slug, c: 1 };
            }
          }
        });
      }

      const yearSel = document.getElementById('calendarYear');
      const monthSel = document.getElementById('calendarMonth');
      const tbody = document.getElementById('calendarBody');

      if (yearSel && monthSel && tbody) {
        const pad = (n) => (n < 10 ? '0' + n : '' + n);
        const dateKey = (y, m, d) => `${y}-${pad(m + 1)}-${pad(d)}`;

        function renderCalendar() {
          const y = parseInt(yearSel.value, 10);
          const m = parseInt(monthSel.value, 10);
          const first = new Date(y, m, 1);
          const startDay = first.getDay();
          const daysInMonth = new Date(y, m + 1, 0).getDate();

          tbody.innerHTML = '';
          let day = 1;
          for (let r = 0; r < 6; r++) {
            const tr = document.createElement('tr');
            for (let c = 0; c < 7; c++) {
              const td = document.createElement('td');
              td.className = 'py-1';
              if (r === 0 && c < startDay) {
                td.innerHTML = '\u00A0';
              } else if (day > daysInMonth) {
                td.innerHTML = '\u00A0';
              } else {
                const key = dateKey(y, m, day);
                const entry = POSTS_BY_DATE[key];
                if (entry) {
                  const a = document.createElement('a');
                  a.href = `/${entry.s}/`;
                  a.textContent = String(day);
                  a.className = 'inline-block w-8 h-8 leading-8 rounded hover:bg-blue-50 text-blue-600 underline';
                  if (entry.c > 1) {
                    const badge = document.createElement('span');
                    badge.textContent = String(entry.c);
                    badge.className = 'ml-1 text-[10px] text-gray-600';
                    a.appendChild(badge);
                  }
                  td.appendChild(a);
                } else {
                  const span = document.createElement('span');
                  span.textContent = String(day);
                  span.className = 'inline-block w-8 h-8 leading-8 rounded text-gray-700';
                  td.appendChild(span);
                }
                day++;
              }
              tr.appendChild(td);
            }
            tbody.appendChild(tr);
          }
        }

            yearSel.addEventListener('change', renderCalendar);
            monthSel.addEventListener('change', renderCalendar);
            // Log map size for debug in dev
            try { console.debug('calendar map keys:', Object.keys(POSTS_BY_DATE).length); } catch {}
            renderCalendar();
          }

      const sel = document.getElementById('sidebarCategory');
      if (sel) {
        sel.addEventListener('change', () => {
          document.querySelectorAll('#blog-nav li').forEach((li) => {
            li.style.display = sel.value === 'All' || li.dataset.category === sel.value ? '' : 'none';
          });
        });
      }
    };
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }
  })();
</script>
			<main class="order-2 lg:order-2 min-w-0">
				<slot />
			</main>

			<!-- Sidebar remainder below content on mobile, left column on desktop -->
			<div class="order-3 lg:order-3 self-start space-y-4">
					<!-- Sidebar category filter -->
					<div class="card px-4 py-3">
						<label for="sidebarCategory" class="block mb-1 font-medium">Category:</label>
						<select id="sidebarCategory" class="w-full border rounded px-2 py-1 bg-white dark:bg-gray-900">
							{categories.map((cat) => (
								<option value={cat}>{cat}</option>
							))}
						</select>
					</div>

					<nav id="blog-nav" class="card px-2 py-2">
						<ul>
								{sidebarPosts.map((item) => (
								<li data-category={item.data.category}>
									<a href={`/${item.slug}/`} class={`block rounded-md px-3 py-2 hover:bg-gray-50 dark:hover:bg-gray-800 transition ${item.slug === url.pathname.slice(1, -1) ? 'bg-gray-100 dark:bg-gray-800 font-semibold' : ''}`}>
										<span class="line-clamp-1">{item.data.title}</span>
										<small class="text-xs text-gray-500">{item.data.date.toDateString()}</small>
									</a>
								</li>
							))}
						</ul>
						<div class="px-2 py-2 border-t border-gray-100 dark:border-gray-800 text-sm">
							<a class="underline" href="/archive/">View all posts →</a>
						</div>
						</nav>
			</div>
		</div>
		)}
		<footer class="mt-10 border-t border-gray-200 dark:border-gray-800">
			<div class="container-page py-8 text-sm text-gray-500 dark:text-gray-400">
				© {new Date().getFullYear()} Subaru Misc Blog. All rights reserved.
			</div>
		</footer>
	</body>
	</html>
