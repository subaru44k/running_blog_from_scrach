---
import '../styles/global.css';
// Layout.astro: site metadata for SEO and sidebar post navigation
import { getCollection } from 'astro:content';
const { site, url } = Astro;
const canonicalUrl = new URL(url.pathname, site).toString();

// Fetch published posts for sidebar
const posts = await getCollection('blog', ({ data }) => data.status === 'publish');
posts.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

// Derive unique categories for sidebar filter
const categories = Array.from(new Set(posts.map((p) => p.data.category))).sort();
categories.unshift('All');

// Prepare calendar data: date -> posts mapping (use slug date to avoid TZ drift)
const postsByDate = posts.reduce((acc, p) => {
  const key = p.slug.slice(0, 10); // YYYY-MM-DD from filename
  (acc[key] ||= []).push({ slug: p.slug, title: p.data.title });
  return acc;
}, {} as Record<string, { slug: string; title: string }[]>);

// Years available for selection
const years = Array.from(new Set(posts.map((p) => p.data.date.getFullYear()))).sort((a, b) => a - b);
const now = new Date();
const currentYear = now.getFullYear();
const currentMonth = now.getMonth();

// Server-render initial month grid for better UX (no-JS fallback)
function buildInitialMonth(year: number, month: number) {
  const first = new Date(year, month, 1);
  const startDay = first.getDay();
  const daysInMonth = new Date(year, month + 1, 0).getDate();
  const rows: { day: number; slug?: string; count?: number }[][] = [];
  let day = 1;
  for (let r = 0; r < 6; r++) {
    const row: { day: number; slug?: string; count?: number }[] = [];
    for (let c = 0; c < 7; c++) {
      if (r === 0 && c < startDay) {
        row.push({ day: 0 });
      } else if (day > daysInMonth) {
        row.push({ day: 0 });
      } else {
        const key = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
        const posts = postsByDate[key];
        if (posts?.length) {
          row.push({ day, slug: posts[0].slug, count: posts.length });
        } else {
          row.push({ day });
        }
        day++;
      }
    }
    rows.push(row);
  }
  return rows;
}
const initialMonthRows = buildInitialMonth(currentYear, currentMonth);
---
<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
			<meta name="viewport" content="width=device-width, initial-scale=1" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro Blog</title>
		<link rel="canonical" href={canonicalUrl} />
		<meta property="og:url" content={canonicalUrl} />
	</head>
	<body class="min-h-screen">
		<header class="border-b border-gray-200 p-4">
			<a href="/" class="text-xl font-bold">Home</a>
		</header>
		<div class="flex">
			<aside class="w-1/4 pr-4 max-h-screen overflow-y-auto border-r border-gray-200">
					<!-- Sidebar calendar -->
					<div class="px-4 py-3 border-b border-gray-200">
						<h2 class="text-lg font-semibold mb-2">Calendar</h2>
						<div class="flex gap-2 mb-2">
							<label for="calendarYear" class="sr-only">Year</label>
							<select id="calendarYear" class="border rounded px-2 py-1 flex-1" value={currentYear}>
								{years.map((y) => (
									<option value={y} selected={y === currentYear}>{y}</option>
								))}
							</select>
							<label for="calendarMonth" class="sr-only">Month</label>
							<select id="calendarMonth" class="border rounded px-2 py-1 flex-1" value={currentMonth}>
								{[...Array(12)].map((_, i) => (
									<option value={i} selected={i === currentMonth}>{new Date(2000, i, 1).toLocaleString('en-US', { month: 'short' })}</option>
								))}
							</select>
						</div>
						<table class="w-full text-sm text-center select-none">
							<thead>
								<tr class="text-gray-500">
									{['Su','Mo','Tu','We','Th','Fr','Sa'].map((d) => (<th class="py-1 font-medium">{d}</th>))}
								</tr>
							</thead>
							<tbody id="calendarBody">
								{initialMonthRows.map((week) => (
									<tr>
										{week.map((cell) => (
											<td class="py-1">
												{cell.day === 0 ? (
													<span class="inline-block w-8 h-8"></span>
												) : cell.slug ? (
													<a href={`/${cell.slug}/`} class="inline-block w-8 h-8 leading-8 rounded hover:bg-blue-50 text-blue-600 underline">
														{cell.day}
														{cell.count && cell.count > 1 ? (
															<span class="ml-1 text-[10px] text-gray-600">{cell.count}</span>
														) : null}
													</a>
												) : (
													<span class="inline-block w-8 h-8 leading-8 rounded text-gray-700">{cell.day}</span>
												)}
											</td>
										))}
									</tr>
								))}
							</tbody>
						</table>
						<p class="mt-2 text-xs text-gray-500">Dates with posts are clickable.</p>
					</div>
					<!-- Sidebar category filter -->
					<div class="px-4 py-2">
						<label for="sidebarCategory" class="block mb-1 font-medium">Category:</label>
						<select id="sidebarCategory" class="w-full border rounded px-2 py-1">
							{categories.map((cat) => (
								<option value={cat}>{cat}</option>
							))}
						</select>
					</div>

					<nav id="blog-nav">
						<ul>
							{posts.map((item) => (
								<li data-category={item.data.category} class={item.slug === url.pathname.slice(1, -1) ? 'font-bold' : ''}>
									<a href={`/${item.slug}/`} class="block py-2 hover:bg-gray-100">
										<span class="font-semibold">{item.data.title}</span><br />
										<small class="text-sm text-gray-500">{item.data.date.toDateString()}</small>
									</a>
								</li>
							))}
						</ul>
					</nav>
    </aside>
   <script>
     (function initSidebar() {
       const init = () => {
       // Calendar setup: build posts-by-date map from sidebar links to avoid JSON embedding issues
       const POSTS_BY_DATE = {};
       document.querySelectorAll('#blog-nav a[href^="/"]').forEach((a) => {
         const href = a.getAttribute('href') || '';
         const m = href.match(/^\/(\d{4}-\d{2}-\d{2})\//);
         if (m) {
           const key = m[1];
           const slug = href.replace(/^\/+|\/+$/g, '');
           const title = a.textContent?.trim() || slug;
           (POSTS_BY_DATE[key] ||= []).push({ slug, title });
         }
       });

       const yearSel = document.getElementById('calendarYear');
       const monthSel = document.getElementById('calendarMonth');
       const tbody = document.getElementById('calendarBody');

       if (yearSel && monthSel && tbody) {
         const pad = (n) => (n < 10 ? '0' + n : '' + n);
         const dateKey = (y, m, d) => `${y}-${pad(m + 1)}-${pad(d)}`;

         function renderCalendar() {
           const y = parseInt(yearSel.value, 10);
           const m = parseInt(monthSel.value, 10);
           const first = new Date(y, m, 1);
           const startDay = first.getDay();
           const daysInMonth = new Date(y, m + 1, 0).getDate();

           tbody.innerHTML = '';
           let day = 1;
           for (let r = 0; r < 6; r++) {
             const tr = document.createElement('tr');
             for (let c = 0; c < 7; c++) {
               const td = document.createElement('td');
               td.className = 'py-1';
               if (r === 0 && c < startDay) {
                 td.innerHTML = '\u00A0';
               } else if (day > daysInMonth) {
                 td.innerHTML = '\u00A0';
               } else {
                 const key = dateKey(y, m, day);
                 const posts = POSTS_BY_DATE[key];
                 if (posts && posts.length) {
                   const a = document.createElement('a');
                   a.href = `/${posts[0].slug}/`;
                   a.textContent = String(day);
                   a.className = 'inline-block w-8 h-8 leading-8 rounded hover:bg-blue-50 text-blue-600 underline';
                   if (posts.length > 1) {
                     const badge = document.createElement('span');
                     badge.textContent = String(posts.length);
                     badge.className = 'ml-1 text-[10px] text-gray-600';
                     a.appendChild(badge);
                   }
                   td.appendChild(a);
                 } else {
                   const span = document.createElement('span');
                   span.textContent = String(day);
                   span.className = 'inline-block w-8 h-8 leading-8 rounded text-gray-700';
                   td.appendChild(span);
                 }
                 day++;
               }
               tr.appendChild(td);
             }
             tbody.appendChild(tr);
           }
         }

         yearSel.addEventListener('change', renderCalendar);
         monthSel.addEventListener('change', renderCalendar);
         renderCalendar();
       }

        const sel = document.getElementById('sidebarCategory');
       sel.addEventListener('change', () => {
         document.querySelectorAll('#blog-nav li').forEach((li) => {
           li.style.display = sel.value === 'All' || li.dataset.category === sel.value ? '' : 'none';
         });
       });
       };
       if (document.readyState === 'loading') {
         document.addEventListener('DOMContentLoaded', init);
       } else {
         init();
       }
     })();
    </script>
			<main class="w-3/4 p-6">
				<slot />
			</main>
		</div>
	</body>
	</html>
