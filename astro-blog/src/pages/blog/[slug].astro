---
import { getCollection, getEntryBySlug } from 'astro:content';
import Layout from '../../../src/layouts/Layout.astro';

export const prerender = true;

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({ params: { slug: post.slug } }));
}

const { slug } = Astro.params;

// Load all published posts for sidebar navigation
const posts = await getCollection('blog', ({ data }) => data.status === 'publish');
posts.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

// Load the requested post
const post = await getEntryBySlug('blog', slug);
if (!post) {
  throw new Error(`Post not found: ${slug}`);
}
---

<Layout>
  <div class="flex">
    <aside class="w-1/4 pr-4">
      <nav id="blog-nav">
        <ul>
          {posts.map((item) => (
            <li class={item.slug === slug ? 'font-bold' : ''}>
              <a href={`/blog/${item.slug}/`}>{item.data.title}</a>
            </li>
          ))}
        </ul>
      </nav>
    </aside>
    <main id="post-content" class="w-3/4">
      <article>
        <h1>{post.data.title}</h1>
        <p>
          <time datetime={post.data.date.toISOString()}>
            {post.data.date.toDateString()}
          </time>
        </p>
        <div set:html={post.body}></div>
      </article>
    </main>
  </div>
  <script type="module" client:load>
    const nav = document.getElementById('blog-nav');
    const contentContainer = document.getElementById('post-content');

    nav.addEventListener('click', async (e) => {
      const anchor = e.target.closest('a');
      if (!anchor || !nav.contains(anchor)) return;
      e.preventDefault();
      const url = anchor.href;
      history.pushState(null, '', url);
      const resp = await fetch(url);
      if (resp.ok) {
        const html = await resp.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const newContent = doc.getElementById('post-content');
        if (newContent) {
          contentContainer.replaceWith(newContent);
        }
        nav.querySelectorAll('li').forEach((li) => {
          const a = li.querySelector('a');
          if (a) li.classList.toggle('font-bold', a.href === url);
        });
      }
    });

    window.addEventListener('popstate', async () => {
      const url = location.href;
      const resp = await fetch(url);
      if (resp.ok) {
        const html = await resp.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const newContent = doc.getElementById('post-content');
        if (newContent) {
          document.getElementById('post-content').replaceWith(newContent);
        }
        nav.querySelectorAll('li').forEach((li) => {
          const a = li.querySelector('a');
          if (a) li.classList.toggle('font-bold', a.href === url);
        });
      }
    });
  </script>
</Layout>
